#!/bin/sh

if [ "$#" -lt 4 ]; then
   echo "Error!: usage $0 cluster_name aws_account region_name num_worker_nodes"
   exit 1
fi

cluster_name=$1
account=$2
region=$3
node=$4
efs_role="AmazonEKS_EFS_CSI_DriverRole"

echo "Creating cluster $cluster_name with AWS Account $account in region $region"
echo "are you sure? (y/n)"
read opt

if [ "$opt" != "Y" ] && [ "$opt" != "y" ]; then
    echo "Great!"
    exit 1
fi

./eksctl create cluster --name $cluster_name --region $region --nodegroup-name g1 --node-type t2.micro --nodes $node
oidc_id=$(aws eks describe-cluster --name $cluster_name --query "cluster.identity.oidc.issuer" --output text | cut -d '/' -f 5)

./eksctl utils associate-iam-oidc-provider --cluster $cluster_name --approve

cat <<EOF > aws-efs-csi-driver-trust-policy.json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Federated": "arn:aws:iam::$account:oidc-provider/oidc.eks.$region.amazonaws.com/id/$oidc_id"
      },
      "Action": "sts:AssumeRoleWithWebIdentity",
      "Condition": {
        "StringLike": {
          "oidc.eks.$region.amazonaws.com/id/$oidc_id:sub": "system:serviceaccount:kube-system:efs-csi-*",
          "oidc.eks.$region.amazonaws.com/id/$oidc_id:aud": "sts.amazonaws.com"
        }
      }
    }
  ]
}
EOF

echo "Applying IAM Policy"
curl -O https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.5.4/docs/install/iam_policy.json

aws iam create-policy \
    --policy-name AWSLoadBalancerControllerIAMPolicy \
    --policy-document file://iam_policy.json

aws iam create-role \
  --role-name $efs_role \
  --assume-role-policy-document file://aws-efs-csi-driver-trust-policy.json

aws iam attach-role-policy \
  --policy-arn arn:aws:iam::$account:policy/AmazonEKS_EFS_CSI_Driver_Policy \
  --role-name $efs_role

./eksctl create iamserviceaccount \
  --cluster=$cluster_name \
  --namespace=kube-system \
  --name=efs-csi-controller-sa \
  --role-name=$efs_role \
  --attach-policy-arn=arn:aws:iam::aws:policy/service-role/$efs_role \
  --role-only \
  --approve \
  --override-existing-serviceaccounts

./eksctl create iamserviceaccount \
  --cluster=$cluster_name \
  --namespace=kube-system \
  --name=aws-load-balancer-controller \
  --role-name AmazonEKSLoadBalancerControllerRole \
  --attach-policy-arn=arn:aws:iam::$account:policy/AWSLoadBalancerControllerIAMPolicy \
  --approve \
  --override-existing-serviceaccounts

echo "Updating helm charts"
./helm repo add eks https://aws.github.io/eks-charts
./helm repo add aws-efs-csi-driver https://kubernetes-sigs.github.io/aws-efs-csi-driver
./helm repo update eks
./helm repo update aws-efs-csi-driver

echo "Installing aws-efs-csi-driver"
helm install aws-efs-csi-driver efs-csi-driver/efs-csi-driver \
  --namespace kube-system \
  --set controller.serviceAccount.create=false \
  --set controller.serviceAccount.name=efs-csi-controller-sa
  --set region=$region

echo "Installing aws-load-balancer-controller with helm"
./helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
  -n kube-system \
  --set clusterName=$cluster_name \
  --set serviceAccount.create=false \
  --set serviceAccount.name=aws-load-balancer-controller \
  --set region=$region

echo "Invoking tech stack"
kubectl apply -f ingress.yaml
kubectl apply -f service.yaml
kubectl apply -f deployment.yaml
kubectl apply -f efs-sc.yaml

# don't touch below this point untested
#kubectl apply -f pv-pvc.yaml
#kubectl apply -f app_efs.yaml




